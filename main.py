import telebot
from telebot import types
import logging
import sqlite3
import uuid
from datetime import datetime, timedelta

logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)

bot = telebot.TeleBot('6432599280:AAGtVe1czZYj5wFfDo4SqeNWjJpwhvvfoKc')

admin_user_ids = [487545908, 5876436640]

conn = sqlite3.connect("db.db", check_same_thread=False)

cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS contracts (
                    contract_id TEXT,
                    message_id INT,
                    chat_id INT,
                    message TEXT
                )''')
conn.commit()

cursor.execute('''CREATE TABLE IF NOT EXISTS admin_votes (
                    admin_id TEXT,
                    contract_id TEXT,
                    voted INT
                )''')
conn.commit()

cursor.execute('''CREATE TABLE IF NOT EXISTS executors (
                    contract_id TEXT,
                    pretendents TEXT,
                    executor INT
                )''')
conn.commit()

cursor.execute('''CREATE TABLE IF NOT EXISTS pretendents (
                    contract_id TEXT,
                    pretendent_id INT,
                    votes INT
                )''')
conn.commit()

def admin_only(func):
    def wrapper(message):
        if message.from_user.id in admin_user_ids:
            return func(message)
        else:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    return wrapper

def check_for_pretender(chat_id, contract_id):
    lst = []
    try:
        cursor.execute("SELECT * FROM pretendents WHERE contract_id = ?", (contract_id,))
        rows1 = cursor.fetchall()

    except IndexError:
        cursor.execute("INSERT INTO pretendents (contract_id, pretendent_id, votes) VALUES (?, ?, ?)",
                       (contract_id, chat_id, 0))
        conn.commit()
        cursor.execute("SELECT * FROM pretendents WHERE contract_id = ?", (contract_id,))
        rows1 = cursor.fetchall()
    for row in rows1:
        lst.append(row[1])

    if chat_id not in lst:
        cursor.execute("INSERT INTO pretendents (contract_id, pretendent_id, votes) VALUES (?, ?, ?)",
                       (contract_id, chat_id, 0))
        conn.commit()

def get_z1blo_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    text_button = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å chat id —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É', url='t.me/z4eb4lo')
    keyboard.add(text_button)
    return keyboard


def get_contract_keyboard(message_id, user_id):
    h = '–•—ç—à—Ç–µ–≥–∏'
    ty = '–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'
    tz = '–¢–ó'
    sr = '–°—Ä–æ–∫'
    st = '–°—Ç–æ–∏–º–æ—Å—Ç—å'
    d = '–î–æ–ø. —É—Å–ª–æ–≤–∏—è'
    if user_id in user_data and user_data[user_id].get("hash_status") == True:
        h = '–•—ç—à—Ç–µ–≥–∏‚úÖ'
    if user_id in user_data and user_data[user_id].get("type_status") == True:
        ty = '–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞‚úÖ'
    if user_id in user_data and user_data[user_id].get("tz_status") == True:
        tz = '–¢–ó‚úÖ'
    if user_id in user_data and user_data[user_id].get("srok_status") == True:
        sr = '–°—Ä–æ–∫‚úÖ'
    if user_id in user_data and user_data[user_id].get("cost_status") == True:
        st = '–°—Ç–æ–∏–º–æ—Å—Ç—å‚úÖ'
    if user_id in user_data and user_data[user_id].get("dop_status") == True:
        d = '–î–æ–ø. —É—Å–ª–æ–≤–∏—è‚úÖ'
    if user_id in user_data and user_data[user_id].get("button_status") == False:
        bu = '–ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–ø–∏—Å–∞—Ç—å"‚ùå'
    if user_id in user_data and user_data[user_id].get("button_status") == True:
        bu = '–ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–ø–∏—Å–∞—Ç—å"‚úÖ'

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton(f'{h}', callback_data=f'hashtags_{message_id}')
    button2 = types.InlineKeyboardButton(f'{ty}', callback_data=f'type_{message_id}')
    button3 = types.InlineKeyboardButton(f'{tz}', callback_data=f'tz_{message_id}')
    button4 = types.InlineKeyboardButton(f'{sr}', callback_data=f'srok_{message_id}')
    button5 = types.InlineKeyboardButton(f'{st}', callback_data=f'cost_{message_id}')
    button6 = types.InlineKeyboardButton(f'{d}', callback_data=f'dop_{message_id}')
    button_sign = types.InlineKeyboardButton(f'{bu}', callback_data=f'button_status')
    button_cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data=f'cancel')
    done = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç', callback_data=f'done')
    keyboard.add(button1, button2, button3, button4, button5, button6, button_sign)
    keyboard.add(done)
    keyboard.add(button_cancel)
    return keyboard


channel_id_filename = "channel_id.txt"
group_id_filename = "group_id.txt"


def save_channel_id(channel_id):
    with open(channel_id_filename, "w") as file:
        file.write(str(channel_id))


def load_channel_id():
    try:
        with open(channel_id_filename, "r") as file:
            return int(file.read())
    except FileNotFoundError:
        return None


def contract_start_message(chat_id, message_id):
    keyboard = get_contract_keyboard(message_id, chat_id)
    bot.edit_message_text(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML",
        chat_id, message_id, reply_markup=keyboard)


def contract_start_message1(chat_id):
    keyboard = get_contract_keyboard(123231, chat_id)
    bot.send_message(chat_id,
                     "–ü—Ä–æ–¥–æ–ª–∂–∏–º. –í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML",
                     reply_markup=keyboard)


@bot.message_handler(commands=['help'])
def help(message):
    msg = (
        '<code>/start</code> - –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>/start</code> '
        '–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∑–∞–Ω–æ–≤–æ\n\n')
    msg += (
        '<code>/change_channel</code> - —Å–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã. –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ '
        '–∫–æ–º–∞–Ω–¥—ã, –≤—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã.\n–ï—Å–ª–∏ '
        '–Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å –∫–∞–Ω–∞–ª - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    bot.send_message(message.from_user.id, msg, parse_mode='html')


@bot.message_handler(commands=['change_channel'])
@admin_only
def change_channel(message):
    user_id = message.from_user.id
    bot.send_message(user_id,
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å "
                     "–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã.\n\n<b>–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –¥–æ–±–∞–≤—å—Ç–µ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ "
                     "—Ö–æ—Ç–∏—Ç–µ"
                     "–º–µ–Ω—è—Ç—å –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", parse_mode='html')
    bot.register_next_step_handler(message, get_channel_id)


def get_group_id(message):
    user_id = message.from_user.id
    if message.forward_from_chat is not None:
        global group
        group_id = message.forward_from_chat.id
        if load_group_id() == group_id:
            bot.send_message(user_id, '–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω –∫–∞–∫ —Ü–µ–ª–µ–≤–∞—è')
        else:
            save_group_id(group_id)
            bot.send_message(user_id, f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {group_id}")
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã.")


def get_channel_id(message):
    user_id = message.from_user.id
    if message.forward_from_chat is not None and message.forward_from_chat.type == 'channel':
        global channel_id
        channel_id = message.forward_from_chat.id
        if load_channel_id() == channel_id:
            bot.send_message(user_id, '–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –≤—ã–±—Ä–∞–Ω –∫–∞–∫ —Ü–µ–ª–µ–≤–æ–π')
        else:
            save_channel_id(channel_id)
            bot.send_message(user_id, f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {channel_id}")
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")


@bot.message_handler(commands=['chat_id'])
def print_chat_id(message):
    user_id = message.from_user.id
    keyboard = get_z1blo_keyboard()
    bot.send_message(user_id, f'–í–∞—à chat id : <code>{user_id}</code>\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ chat id',
                     parse_mode='html', reply_markup=keyboard)


user_data = {}

def make_contract_message_signed(contract_id):
    cursor.execute("SELECT * FROM contracts WHERE contract_id = ?", (contract_id,))
    rows = cursor.fetchall()
    contract_id, message_id, chat_id, messagecon = rows[0]
    cursor.execute("SELECT executor FROM executors WHERE contract_id = ?", (contract_id,))
    executor_id = cursor.fetchone()
    username = bot.get_chat(executor_id).username
    messagecon = messagecon.replace('üò¥–û–∂–∏–¥–∞–µ—Ç —Å–≤–æ–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', f'‚úçÔ∏è@{username} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç', 1)
    bot.edit_message_text(messagecon, chat_id, message_id, parse_mode='html')

def make_onetime_contract_message_signed(contract_id, username):
    cursor.execute("SELECT * FROM contracts WHERE contract_id = ?", (contract_id,))
    rows = cursor.fetchall()
    contract_id, message_id, chat_id, messagecon = rows[0]
    messagecon = messagecon.replace('üò¥–û–∂–∏–¥–∞–µ—Ç —Å–≤–æ–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', f'‚úçÔ∏è@{username} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç', 1)
    bot.edit_message_text(messagecon, chat_id, message_id, parse_mode='html')

def admin_accept_keyboard(contract_id, user_id):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    accept = types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', url=f't.me/monopolycontractbot?start=adminaccept_{contract_id}_{user_id}')
    keyboard.add(accept)
    return keyboard


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user = bot.get_chat(user_id)
    username = user.username
    if message.text.startswith('/start signonetime'):
        contract_id = message.text.replace('/start signonetime', '', 1)
        cursor.execute("SELECT * FROM contracts WHERE contract_id = ?", (contract_id,))
        rows = cursor.fetchall()
        contract_id, message_id, chat_id, messagecon = rows[0]
        bot.send_message(user_id, f'–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç {contract_id}')
        make_onetime_contract_message_signed(contract_id, username)
        for admin_id in admin_user_ids:
            bot.send_message(admin_id, f'@{username} –ø–æ–¥–ø–∏—Å–∞–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º {contract_id}',
                             parse_mode='html')
    if message.text.startswith('/start signkonkurs'):
        contract_id = message.text.replace('/start signkonkurs', '', 1)

        cursor.execute("SELECT * FROM executors WHERE contract_id = ?", (contract_id,))
        rows = cursor.fetchall()[0]
        if rows[2] == 0:
            check_for_pretender(user_id, contract_id)
            cursor.execute("SELECT * FROM contracts WHERE contract_id = ?", (contract_id,))
            rows = cursor.fetchall()
            contract_id, message_id, chat_id, messagecon = rows[0]
            accept_keyboard = admin_accept_keyboard(contract_id, user_id)
            bot.send_message(user_id, f'–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!')
            for admin in admin_user_ids:
                bot.send_message(admin, f'–ù–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç ‚Ññ{contract_id} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É @{username}, –≤—ã–±–∏—Ä–∞–π—Ç–µ –µ–≥–æ —Å—É–¥—å–±—É!', reply_markup=accept_keyboard)
        else:
            bot.send_message(user_id, f'–£–≤—ã, –Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω!')
    if message.text.startswith('/start adminaccept'):
        _, contract_id, executor_id = message.text.split('_', 2)
        group_id = load_group_id()
        executor_id = int(executor_id)

        cursor.execute("SELECT * FROM executors WHERE contract_id = ?", (contract_id,))

        txt = cursor.fetchall()[0][1]
        if txt == None:
            txt = ''
        txt += f',{executor_id}'

        cursor.execute("UPDATE executors SET pretendents = ? WHERE contract_id = ?", (txt, contract_id))

        cursor.execute("SELECT * FROM executors WHERE contract_id = ?", (contract_id,))
        rows = cursor.fetchall()[0]

        cursor.execute("SELECT * FROM pretendents WHERE contract_id = ? AND pretendent_id = ?", (contract_id, executor_id))
        rows1 = cursor.fetchall()
        if rows[2] == 0:

            pretendents = rows[1].split(',')
            pretendents.remove('')
            pretendents = set(pretendents)

            cursor.execute("SELECT * FROM pretendents WHERE contract_id = ? AND pretendent_id = ?",
                           (contract_id, executor_id))

            votes = cursor.fetchall()[0][2]

            cursor.execute('SELECT voted FROM admin_votes WHERE admin_id = ? AND contract_id = ?', (user_id, contract_id))
            voted = cursor.fetchone()[0]

            if voted:
                bot.send_message(user_id, '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ!')
            else:
                votes += 1
                cursor.execute('UPDATE admin_votes SET voted = ? WHERE admin_id = ? AND contract_id = ?', (True, user_id, contract_id))
                bot.send_message(user_id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ ‚Ññ{contract_id}!')

            cursor.execute("UPDATE pretendents SET votes = ? WHERE pretendent_id = ? AND contract_id = ?",
                           (votes, executor_id, contract_id))
            conn.commit()

            #–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ –ª–∏ –∞–¥–º–∏–Ω—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
            cursor.execute('SELECT * FROM admin_votes WHERE contract_id = ?', (contract_id,))
            admin_votes = cursor.fetchall()

            voted = []
            for admin_vote in admin_votes:
                voted.append(admin_vote[2])
            if voted.count(False) == 0:
                winner = {}
                for pretendent in pretendents:
                    pretendent_id = int(pretendent)
                    cursor.execute("SELECT * FROM pretendents WHERE contract_id = ? AND pretendent_id = ?", (contract_id, pretendent_id))
                    votes = cursor.fetchall()[0][2]
                    winner[votes] = pretendent_id
                win = max(winner)
                win_id = winner[win]
                cursor.execute("UPDATE executors SET executor = ? WHERE contract_id = ?", (win_id, contract_id))
                conn.commit()
                executor = bot.get_chat(win_id)
                executor_username = executor.username
                make_contract_message_signed(contract_id)
                for admin in admin_user_ids:
                    bot.send_message(admin,
                                     f'#–∫–æ–Ω—Ç—Ä–∞–∫—Ç #–ø–æ–¥–ø–∏—Å–∞–Ω\n–ö–æ–Ω—Ç—Ä–∞–∫—Ç ‚Ññ{contract_id} –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω —Å @{executor_username}, –∏–∑–±—Ä–∞–Ω–Ω—ã–º –Ω–∞—Ä–æ–¥–Ω—ã–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º!')
                bot.send_message(executor,f'–ü–æ–∑–¥—Ä–∞–≤—è–ª–µ–º!\n–ö–æ–Ω—Ç—Ä–∞–∫—Ç {contract_id} –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω —Å @{executor_username}, —Ç–æ–µ—Å—Ç—å —Å –í–∞–º–∏!!!')


contract_types_list = ['–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π', '–ö–æ–Ω–∫—É—Ä—Å']


def types_keyboard():
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for typ in contract_types_list:
        keyboard.add(types.KeyboardButton(typ))
    return keyboard


@bot.message_handler(commands=['create_contract'])
def create_contract(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'step': 2}
        user_data[user_id] = {"button_status": False}
    user_data[user_id]['stage'] = 0
    user_data[user_id]['step'] = 2
    sent_message = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏(–ë–µ–∑ —Å–∏–º–≤–æ–ª–∞ "#", —Ä–∞–∑–¥–µ–ª—è—è –∑–∞–ø—è—Ç–æ–π, –Ω–µ –≤–∞–∂–Ω–æ —Å–∫–æ–ª—å–∫–æ '
                                             '–ø—Ä–æ–±–µ–ª–æ–≤ –±—É–¥–µ—Ç. –•—ç—à—Ç–µ–≥ "#–∫–æ–Ω—Ç—Ä–∞–∫—Ç" –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∞–º–æ–º'
                                             ' –Ω–∞—á–∞–ª–µ)')
    print(user_data[user_id])


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 1 and
                                          user_data[message.chat.id]["stage"] == 0)
def handle_contract_type(message):
    user_id = message.from_user.id
    user_data[message.chat.id]["contract_type"] = message.text
    user_data[message.chat.id]["type_status"] = True
    bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –¢–ó. (–í—Ä—É—á–Ω—É—é, –ø—Ä–æ—Å—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)')
    user_data[user_id]['step'] = 3


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 2 and
                                          user_data[message.chat.id]["stage"] == 0)
def handle_contract_type(message):
    user_id = message.from_user.id
    messagehash = '#–∫–æ–Ω—Ç—Ä–∞–∫—Ç\n\n'
    try:
        hashtags = message.text.split(',')
        for hashtag in hashtags:
            hashtag = hashtag.strip()
            messagehash += f'#{hashtag} '
    except Exception:
        messagehash += f'#{message.text}'
    user_data[message.chat.id]["hashtags"] = messagehash
    user_data[message.chat.id]["hash_status"] = True
    user_data[user_id]['step'] = 1
    keyboard = types_keyboard()
    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.',
                     reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 3 and
                                          user_data[message.chat.id]["stage"] == 0)
def handle_contract_type(message):
    current_date = datetime.now()

    one_day_later = current_date + timedelta(days=1)
    one_day_later = str(one_day_later.replace(hour=0, minute=0, second=0))

    three_days_later = current_date + timedelta(days=3)
    three_days_later = str(three_days_later.replace(hour=0, minute=0, second=0))

    seven_days_later = current_date + timedelta(days=7)
    seven_days_later = str(seven_days_later.replace(hour=0, minute=0, second=0))

    thirty_days_later = current_date + timedelta(days=30)
    thirty_days_later = str(thirty_days_later.replace(hour=0, minute=0, second=0))
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    tommorow = types.KeyboardButton(f'{one_day_later[:-10]}')
    days3 = types.KeyboardButton(f'{three_days_later[:-10]}')
    week = types.KeyboardButton(f'{seven_days_later[:-10]}')
    month = types.KeyboardButton(f'{thirty_days_later[:-10]}')
    keyboard.add(tommorow, days3, week, month)
    user_id = message.from_user.id
    user_data[message.chat.id]["tz"] = message.text
    user_data[message.chat.id]["tz_status"] = True
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞(–ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é, –æ–Ω–æ –Ω–∏–∫–∞–∫ –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è)', reply_markup=keyboard)
    user_data[user_id]['step'] = 4


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 4 and
                                          user_data[message.chat.id]["stage"] == 0)
def handle_contract_type(message):
    user_id = message.from_user.id
    user_data[message.chat.id]["srok"] = message.text
    user_data[message.chat.id]["srok_status"] = True
    user_data[user_id]['step'] = 5
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å(–ß–∏—Å–ª–æ, "BMC" –±—É–¥–µ—Ç –¥–æ–ø–∏—Å–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)')


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 5 and
                                          user_data[message.chat.id]["stage"] == 0)
def handle_contract_type(message):
    user_id = message.from_user.id
    user_data[message.chat.id]["cost"] = message.text.strip()
    user_data[message.chat.id]["cost_status"] = True
    user_data[user_id]['step'] = 6
    bot.send_message(message.chat.id,
                     '–í–≤–µ–¥–∏—Ç–µ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è(–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–π –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ù")')


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 6 and
                                          user_data[message.chat.id]["stage"] == 0)
def handle_contract_type(message):
    user_id = message.from_user.id
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏', callback_data="done")
    keyboard.add(button)
    if message.text == '–ù':
        user_data[user_id]['step'] = 0
    else:
        user_data[message.chat.id]["dop"] = message.text
        user_data[message.chat.id]["dop_status"] = True
    user_data[user_id]['contract_status'] = 'üò¥–û–∂–∏–¥–∞–µ—Ç —Å–≤–æ–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
    bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∏–¥—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', reply_markup=keyboard)


##################################################### —Ç—É—Ç stage 1 ######################################################


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 1 and
                                          user_data[message.chat.id]["stage"] == 1)
def handle_contract_type(message):
    user_id = message.from_user.id
    user_data[message.chat.id]["contract_type"] = message.text
    user_data[message.chat.id]["type_status"] = True
    contract_start_message1(user_id)


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 2 and
                                          user_data[message.chat.id]["stage"] == 1)
def handle_contract_type(message):
    messagehash = '#–∫–æ–Ω—Ç—Ä–∞–∫—Ç\n\n'
    try:
        hashtags = message.text.split(',')
        for hashtag in hashtags:
            hashtag = hashtag.strip()
            messagehash += f'#{hashtag} '
    except Exception:
        messagehash += f'#{message.text}'
    user_data[message.chat.id]["hashtags"] = messagehash
    user_data[message.chat.id]["hash_status"] = True
    contract_start_message1(message.from_user.id)


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 3 and
                                          user_data[message.chat.id]["stage"] == 1)
def handle_contract_type(message):
    user_data[message.chat.id]["tz"] = message.text
    user_data[message.chat.id]["tz_status"] = True
    contract_start_message1(message.from_user.id)


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 4 and
                                          user_data[message.chat.id]["stage"] == 1)
def handle_contract_type(message):
    user_data[message.chat.id]["srok"] = message.text
    user_data[message.chat.id]["srok_status"] = True
    contract_start_message1(message.from_user.id)


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 5 and
                                          user_data[message.chat.id]["stage"] == 1)
def handle_contract_type(message):
    user_data[message.chat.id]["cost"] = message.text
    user_data[message.chat.id]["cost_status"] = True
    contract_start_message1(message.from_user.id)


@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["step"] == 6 and
                                          user_data[message.chat.id]["stage"] == 1)
def handle_contract_type(message):
    user_data[message.chat.id]["dop"] = message.text
    user_data[message.chat.id]["dop_status"] = True
    contract_start_message1(message.from_user.id)


def accept_send_keyboard(message_id):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    accept = types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'accept_{message_id}')
    decline = types.InlineKeyboardButton('–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏', callback_data=f'decline_{message_id}')
    keyboard.add(accept, decline)
    return keyboard


def finish_contract(call):
    user_id = call.from_user.id
    error_message = '–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–º–µ—Ç—Ä–æ–≤:\n'
    if user_id in user_data:
        if user_data[user_id].get("hash_status") and user_data[user_id].get("type_status") and user_data[user_id].get(
                "tz_status") and user_data[user_id].get("srok_status") and user_data[user_id].get("cost_status"):
            contract_message = f"{user_data[user_id]['hashtags']}\n\n"
            contract_message += f"–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {user_data[user_id].get('contract_status')}\n\n"
            contract_message += f"<b>–¢–∏–ø:</b>\n{user_data[user_id]['contract_type']}\n\n"
            contract_message += f"<b>–¢–ó:</b>\n{user_data[user_id]['tz']}\n\n"
            contract_message += f"<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n{user_data[user_id]['srok']}\n\n"
            contract_message += f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n{user_data[user_id]['cost']} BMC\n\n"
            if user_data[user_id].get("dop_status"):
                contract_message += f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\n{user_data[user_id]['dop']}\n\n"
            user_data[user_id]["message"] = contract_message
            sent_message = bot.send_message(user_id, '...')
            keyboard = accept_send_keyboard(sent_message.message_id)
            if user_data[user_id].get('contract_type') in contract_types_list:
                user_data[user_id]['button_status'] = True
                button_status = True
            if user_data[user_id].get("button_status"):
                button_status = True
            else:
                button_status = False
            bot.edit_message_text(
                f"–í–∞—à –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: (–ö–Ω–æ–ø–∫–∞ '–ü–æ–¥–ø–∏—Å–∞—Ç—å': {button_status})\n\n{contract_message}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É",
                user_id,
                sent_message.message_id, reply_markup=keyboard, parse_mode='html')
        else:
            if user_data[user_id].get("hash_status") is not True:
                error_message += '–•–µ—à—Ç–µ–≥–∏\n'
            if user_data[user_id].get("type_status") is not True:
                error_message += '–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞\n'
            if user_data[user_id].get("tz_status") is not True:
                error_message += '–¢–ó\n'
            if user_data[user_id].get("srok_status") is not True:
                error_message += '–°—Ä–æ–∫\n'
            if user_data[user_id].get("cost_status") is not True:
                error_message += '–°—Ç–æ–∏–º–æ—Å—Ç—å\n'
            bot.send_message(user_id, error_message)
            contract_start_message1(user_id)
    else:
        bot.send_message(user_id,
                         "–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")


def one_sign_keyboard(uid):
    sign_keyboard = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç',
                                        url=f't.me/monopolycontractbot?start=signonetime{uid}')
    sign_keyboard.add(button)
    return sign_keyboard


def konkurs_sign_keyboard(uid):
    sign_keyboard = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç',
                                        url=f't.me/monopolycontractbot?start=signkonkurs{uid}')
    sign_keyboard.add(button)
    return sign_keyboard


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    callback = call.data
    if callback.startswith('type_'):
        user_data[user_id]["step"] = 1
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞')
    if callback.startswith('hashtags_'):
        user_data[user_id]["step"] = 2
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é(–±–µ–∑ #)')
    if callback.startswith('tz_'):
        user_data[user_id]["step"] = 3
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –¢–ó')
    if callback.startswith('srok_'):
        user_data[user_id]["step"] = 4
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫')
    if callback.startswith('cost_'):
        user_data[user_id]["step"] = 5
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å(–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ)')
    if callback.startswith('dop_'):
        user_data[user_id]["step"] = 6
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è')
    if callback == 'cancel':
        del user_data[user_id]
        bot.send_message(user_id, '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ - –Ω–∞–ø–∏—à–∏—Ç–µ /start')
    if callback == 'done':
        finish_contract(call)
    if callback.startswith('accept_'):
        uid = str(uuid.uuid4().hex)[22:]
        message = user_data[user_id].get("message")
        sent_message = bot.send_message(load_channel_id(), message, parse_mode='html')
        print(user_data[user_id].get('contract_type'))
        if user_data[user_id].get('button_status'):
            if user_data[user_id].get('contract_type') == '–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π':
                # –µ—Å–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π, —Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ
                sign_keyboard = one_sign_keyboard(uid)
                # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è —Ç—É–¥–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è
                bot.edit_message_text(message, load_channel_id(), sent_message.message_id, reply_markup=sign_keyboard,
                                      parse_mode='html')
            if user_data[user_id].get('contract_type') == '–ö–æ–Ω–∫—É—Ä—Å':
                # –∫–æ–Ω–∫—É—Ä—Å
                sign_keyboard = konkurs_sign_keyboard(uid)
                bot.edit_message_text(message, load_channel_id(), sent_message.message_id, reply_markup=sign_keyboard,
                                      parse_mode='html')
                for admin_id in admin_user_ids:
                    cursor.execute('INSERT INTO admin_votes (admin_id, contract_id, voted) VALUES (?, ?, ?)',
                                   (admin_id, uid, False))
                    conn.commit()
        else:
            bot.edit_message_text(message, load_channel_id(), sent_message.message_id, parse_mode='html')

        cursor.execute("INSERT INTO contracts (contract_id, message_id, chat_id, message) VALUES (?, ?, ?, ?)",
                       (uid, sent_message.message_id, load_channel_id(), message))
        conn.commit()

        cursor.execute("INSERT INTO executors (contract_id, executor) VALUES (?,?)",
                       (uid, 0))
        conn.commit()

        del user_data[user_id]
        bot.send_message(user_id, '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!')
    if callback.startswith('decline_'):
        message_id = int(callback.replace('decline_', '', 1))
        bot.delete_message(user_id, message_id)
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /create_contract')
        user_data[user_id]['stage'] = 1
        contract_start_message1(user_id)
    if callback == 'button_status':
        user_data[user_id]['button_status'] = not (user_data[user_id]['button_status'])
        contract_start_message1(user_id)

# bot.polling()

while True:
    try:
        bot.polling(non_stop=True)
    except Exception as e:
        print(f'{e}. –†–µ—Å—Ç–∞—Ä—Ç')
        continue
